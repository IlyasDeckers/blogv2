<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ilyas Deckers Blog</title><link>https://ilyasdeckers.ody.dev/post/</link><description>Recent content in Posts on Ilyas Deckers Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ilyasdeckers.ody.dev/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Single Action Handlers in PHP Frameworks</title><link>https://ilyasdeckers.ody.dev/p/single-action-handlers/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/single-action-handlers/</guid><description>&lt;h2 id="introduction-what-is-the-single-action-handler-pattern">Introduction: What is the Single Action Handler Pattern?
&lt;/h2>&lt;p>In modern PHP web development, the &lt;strong>Single Action Handler&lt;/strong> (often implemented as an &lt;strong>Invokable Controller&lt;/strong> or specifically as a &lt;strong>PSR-15 Request Handler&lt;/strong>) represents a shift towards more focused, decoupled, and testable code, especially for APIs and specific web actions.&lt;/p>
&lt;p>This pattern moves away from traditional Model-View-Controller (MVC) structures where a single Controller class might handle numerous related routes via multiple methods (e.g., &lt;code>UserController&lt;/code> with &lt;code>index()&lt;/code>, &lt;code>show()&lt;/code>, &lt;code>store()&lt;/code>, etc.).&lt;/p>
&lt;p>Instead, a &lt;strong>Single Action Handler is a class dedicated exclusively to processing the logic for one specific route or endpoint.&lt;/strong> It achieves this typically through:&lt;/p>
&lt;ol>
&lt;li>Implementing PHP&amp;rsquo;s magic &lt;code>__invoke()&lt;/code> method, allowing the class instance to be treated as the action itself.&lt;/li>
&lt;li>Implementing the &lt;code>Psr\Http\Server\RequestHandlerInterface&lt;/code>, which defines a &lt;code>handle(ServerRequestInterface $request): ResponseInterface&lt;/code> method â€“ the standard defined by PSR-15.&lt;/li>
&lt;/ol>
&lt;p>This article explores this pattern, its benefits, the crucial role of PSR standards, and how it can be implemented effectively (and with varying degrees of native support) in popular PHP frameworks like Mezzio, Symfony, and Laravel.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Traditional Multi-Action Controller:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// UserController.php
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">UserController&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">show&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">int&lt;/span> &lt;span class="nv">$id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">store&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Request&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... other methods ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// routes.php
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">Route&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/users/{id}&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">UserController&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;show&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Route&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/users&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">UserController&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;store&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Single Action Handler Pattern (Conceptual):&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ShowUserAction.php (or ShowUserController.php)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ShowUserAction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">int&lt;/span> &lt;span class="nv">$id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Logic for showing a user */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// StoreUserAction.php (or StoreUserController.php)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">StoreUserAction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Request&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Logic for storing a user */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// routes.php
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">Route&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/users/{id}&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ShowUserAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Route&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/users&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">StoreUserAction&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="why-use-this-pattern-the-rationale">Why Use This Pattern? The Rationale
&lt;/h2>&lt;p>Adopting the single action handler pattern brings significant advantages:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Single Responsibility Principle (SRP):&lt;/strong> Each class does exactly one thing. This drastically improves clarity, making code easier to understand, modify safely, and debug.&lt;/li>
&lt;li>&lt;strong>Enhanced Testability:&lt;/strong> Unit testing becomes much simpler. Smaller classes have fewer dependencies to mock, and the scope of each test is clearly defined.&lt;/li>
&lt;li>&lt;strong>Improved Organization:&lt;/strong> Prevents &amp;ldquo;fat controllers.&amp;rdquo; Code can be neatly organized by feature or domain slice, leading to a more maintainable structure, especially in large applications.&lt;/li>
&lt;li>&lt;strong>Increased Readability:&lt;/strong> The class name itself often describes the action (e.g., &lt;code>ProcessPaymentHandler&lt;/code>, &lt;code>GetUserApiEndpoint&lt;/code>). The single &lt;code>handle()&lt;/code> or &lt;code>__invoke()&lt;/code> method contains all relevant logic.&lt;/li>
&lt;li>&lt;strong>Precise Dependency Management:&lt;/strong> Only dependencies needed for that &lt;em>specific action&lt;/em> are injected, leading to cleaner constructors and more efficient resource usage.&lt;/li>
&lt;li>&lt;strong>Reduced Cognitive Load:&lt;/strong> Developers can focus entirely on the task of a single endpoint without the mental overhead of unrelated actions in the same file.&lt;/li>
&lt;/ol>
&lt;h2 id="the-importance-of-psr-standards-for-single-action-handles">The Importance of PSR Standards For single Action Handles
&lt;/h2>&lt;p>Understanding PSR (PHP Standard Recommendations) is crucial for appreciating the full benefits of modern PHP development and patterns like PSR-15 Request Handlers. PSRs are specifications published by the PHP Framework Interop Group (PHP-FIG), comprised of members from various major PHP projects. Their goal is to promote &lt;strong>interoperability&lt;/strong> and &lt;strong>standardization&lt;/strong> across the PHP ecosystem.&lt;/p>
&lt;p>&lt;strong>Key PSRs for Web Development:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PSR-7 (HTTP Message Interfaces):&lt;/strong> Defines standard interfaces for HTTP request (&lt;code>RequestInterface&lt;/code>, &lt;code>ServerRequestInterface&lt;/code>) and response (&lt;code>ResponseInterface&lt;/code>) objects, along with related objects like URIs and streams. A key feature is &lt;strong>immutability&lt;/strong>, which prevents unexpected side effects when messages are passed through multiple layers (like middleware).&lt;/li>
&lt;li>&lt;strong>PSR-15 (HTTP Server Request Handlers &amp;amp; Middleware):&lt;/strong> Builds upon PSR-7.
&lt;ul>
&lt;li>&lt;code>RequestHandlerInterface&lt;/code>: Defines a standard way to process a PSR-7 request and return a PSR-7 response (our Single Action Handler!).&lt;/li>
&lt;li>&lt;code>MiddlewareInterface&lt;/code>: Defines a standard interface for middleware components that process requests &lt;em>before&lt;/em> or &lt;em>after&lt;/em> a handler (or other middleware).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Why Adhering to PSR Standards (like PSR-7/15) is a Good Idea:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Interoperability:&lt;/strong> This is the primary driver. Code written against PSR interfaces (handlers, middleware, HTTP clients, factories) can often be used across different frameworks and libraries that also adhere to those standards. You can mix and match components from different vendors.&lt;/li>
&lt;li>&lt;strong>Reduced Vendor Lock-In:&lt;/strong> By relying on community standards rather than framework-specific abstractions for core functionalities like HTTP handling, your application becomes less tied to a single framework&amp;rsquo;s ecosystem, making future migrations or integrations potentially easier.&lt;/li>
&lt;li>&lt;strong>Reusability:&lt;/strong> Logic encapsulated in PSR-15 handlers or middleware can be more easily reused across different projects, even if those projects use different underlying frameworks (provided they support PSR-15).&lt;/li>
&lt;li>&lt;strong>Consistency &amp;amp; Predictability:&lt;/strong> Standard interfaces mean developers encounter familiar patterns across different projects and libraries. This reduces the learning curve and makes codebases easier to understand and contribute to.&lt;/li>
&lt;li>&lt;strong>Modern Best Practices:&lt;/strong> PSR-7&amp;rsquo;s immutability and PSR-15&amp;rsquo;s clear definition of middleware and handlers encourage decoupled, layered application design, which is widely considered a best practice for building robust web applications.&lt;/li>
&lt;li>&lt;strong>Future-Proofing:&lt;/strong> Basing core application logic on community-agreed standards makes it less vulnerable to breaking changes within a specific framework&amp;rsquo;s internal abstractions.&lt;/li>
&lt;li>&lt;strong>Easier Package Development:&lt;/strong> If you&amp;rsquo;re creating reusable packages (e.g., authentication middleware, API validation logic), targeting PSR interfaces makes them instantly usable in a much wider range of applications.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Relevance to Handlers:&lt;/strong> Using PSR-15 &lt;code>RequestHandlerInterface&lt;/code> directly ties your core request-handling logic to these community standards, unlocking the benefits of interoperability, reusability, and consistency. Frameworks that embrace these standards natively often provide a smoother path to achieving these advantages.&lt;/p>
&lt;h2 id="implementation-across-frameworks">Implementation Across Frameworks
&lt;/h2>&lt;p>Frameworks vary in their native support for PSR-15 handlers.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PSR-15 Native Frameworks (e.g., Mezzio):&lt;/strong> Use PSR-15 handlers as the fundamental way to process requests.&lt;/li>
&lt;li>&lt;strong>Full-Stack Frameworks (e.g., Symfony, Laravel):&lt;/strong> Primarily use their own abstractions but provide mechanisms (bridges, extension points) to integrate PSR-15 handlers, requiring varying levels of effort.&lt;/li>
&lt;/ul>
&lt;h3 id="1-middleware-frameworks-psr-15-native---mezzio-example">1. Middleware Frameworks (PSR-15 Native - Mezzio Example)
&lt;/h3>&lt;p>Frameworks like Mezzio (formerly Zend Expressive) are built &lt;em>from the ground up&lt;/em> around PSR-7 and PSR-15. Using single-action &lt;code>RequestHandlerInterface&lt;/code> implementations is the standard, idiomatic way.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Core Concept:&lt;/strong> Requests flow through a PSR-15 middleware pipeline, ending at a route-specific &lt;code>RequestHandlerInterface&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Example Implementation (Mezzio):&lt;/strong>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/App/Handler/GetUserHandler.php
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">declare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strict_types&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="nx">App\Handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">App\Repository\UserRepositoryInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Laminas\Diactoros\Response\JsonResponse&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Psr\Http\Message\ResponseInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Psr\Http\Message\ServerRequestInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Psr\Http\Server\RequestHandlerInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">GetUserHandler&lt;/span> &lt;span class="k">implements&lt;/span> &lt;span class="nx">RequestHandlerInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">UserRepositoryInterface&lt;/span> &lt;span class="nv">$userRepository&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__construct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">UserRepositoryInterface&lt;/span> &lt;span class="nv">$userRepository&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">userRepository&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$userRepository&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ServerRequestInterface&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ResponseInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Get route parameter (assuming router middleware added it as attribute)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$userId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">userRepository&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$userId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nv">$user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">JsonResponse&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;User not found&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Assuming User object has a suitable method for array conversion
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">JsonResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$user&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">toArray&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;em>Routing (e.g., in &lt;code>config/routes.php&lt;/code>)&lt;/em>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$app&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/users/{id:\d+}&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">App\Handler\GetUserHandler&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;api.user.get&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>&lt;strong>Pros (Mezzio/PSR-15 Native):&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Pure PSR Adherence:&lt;/strong> Natively uses PSR-7/15, maximizing interoperability and benefits of the standards. No bridging needed for core HTTP handling.&lt;/li>
&lt;li>&lt;strong>Minimalism &amp;amp; Performance:&lt;/strong> Very lean core, potentially high performance.&lt;/li>
&lt;li>&lt;strong>Maximum Flexibility &amp;amp; Decoupling:&lt;/strong> Full control over components; promotes decoupled design.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Cons (Mezzio/PSR-15 Native):&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>More Initial Setup:&lt;/strong> Requires assembling the application stack (router, container, ORM, etc.).&lt;/li>
&lt;li>&lt;strong>Smaller Framework-Specific Ecosystem:&lt;/strong> Fewer Mezzio-specific bundles compared to Symfony/Laravel (though any standard PHP/PSR package works).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-symfony-achieving-psr-15-compliance">2. Symfony: Achieving PSR-15 Compliance
&lt;/h3>&lt;p>Symfony is highly flexible and &lt;em>can&lt;/em> work cleanly with PSR-15 handlers, though its core uses &lt;code>HttpFoundation&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Option 1: Adapter Pattern (The Basic Approach)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Concept:&lt;/strong> Create a standard Symfony controller (&lt;code>__invoke&lt;/code>) that acts as a bridge. It receives the &lt;code>HttpFoundation\Request&lt;/code>, converts it to PSR-7 &lt;code>ServerRequestInterface&lt;/code> (using &lt;code>symfony/psr-http-message-bridge&lt;/code>), calls your actual &lt;code>RequestHandlerInterface&lt;/code>, converts the PSR-7 &lt;code>ResponseInterface&lt;/code> back to &lt;code>HttpFoundation\Response&lt;/code>, and returns it.&lt;/li>
&lt;li>&lt;strong>Pros:&lt;/strong> Explicit, relatively easy to understand for a single handler.&lt;/li>
&lt;li>&lt;strong>Cons:&lt;/strong> &lt;strong>Significant boilerplate&lt;/strong> - requires one adapter class per PSR-15 handler. Feels cumbersome.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="nx">App\Controller\Api\Orders&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">App\Handler\ProcessOrderHandler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Component\HttpFoundation\Request&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Symfony Request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Component\HttpFoundation\Response&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Symfony Response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Component\Routing\Annotation\Route&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ProcessOrderAdapterAction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">HttpMessageFactoryInterface&lt;/span> &lt;span class="nv">$psrHttpFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">HttpFoundationFactoryInterface&lt;/span> &lt;span class="nv">$httpFoundationFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">ProcessOrderHandler&lt;/span> &lt;span class="nv">$handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__construct&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">HttpMessageFactoryInterface&lt;/span> &lt;span class="nv">$psrHttpFactory&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">HttpFoundationFactoryInterface&lt;/span> &lt;span class="nv">$httpFoundationFactory&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ProcessOrderHandler&lt;/span> &lt;span class="nv">$handler&lt;/span> &lt;span class="c1">// Autowired by Symfony DI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">psrHttpFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$psrHttpFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">httpFoundationFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$httpFoundationFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#[Route(&amp;#39;/api/orders&amp;#39;, name: &amp;#39;api_order_process&amp;#39;, methods: [&amp;#39;POST&amp;#39;])]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Request&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Response&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 1. Convert Symfony Request -&amp;gt; PSR-7 Request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psrRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">psrHttpFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 2. Call the actual PSR-15 Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psrResponse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handler&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psrRequest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 3. Convert PSR-7 Response -&amp;gt; Symfony Response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">httpFoundationFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psrResponse&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 4. Return Symfony Response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nv">$response&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Option 2: Centralized Listener (The Cleaner Approach)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concept:&lt;/strong> Leverage Symfony&amp;rsquo;s Kernel Events. Create an Event Listener for the &lt;code>kernel.controller&lt;/code> event. This listener checks if the controller resolved by the router implements &lt;code>RequestHandlerInterface&lt;/code>. If it does, the listener takes over: it uses the PSR-7 bridge to convert the request, executes the handler&amp;rsquo;s &lt;code>handle&lt;/code> method, converts the response back, and sets it directly on the event (&lt;code>$event-&amp;gt;setResponse()&lt;/code>), bypassing Symfony&amp;rsquo;s standard controller execution.&lt;/li>
&lt;li>&lt;strong>Detailed Steps:&lt;/strong>
&lt;ol>
&lt;li>Install bridge: &lt;code>composer require symfony/psr-http-message-bridge nyholm/psr7&lt;/code> (Nyholm is a popular PSR-7 implementation).&lt;/li>
&lt;li>Create your PSR-15 handler class (implementing &lt;code>RequestHandlerInterface&lt;/code>). Ensure it&amp;rsquo;s registered as a service.&lt;/li>
&lt;li>Create an Event Listener class implementing &lt;code>EventSubscriberInterface&lt;/code> or listening to &lt;code>KernelEvents::CONTROLLER&lt;/code>.&lt;/li>
&lt;li>Inject &lt;code>HttpMessageFactoryInterface&lt;/code> and &lt;code>HttpFoundationFactoryInterface&lt;/code> (from the bridge) into the listener.&lt;/li>
&lt;li>In the listener method:
&lt;ul>
&lt;li>Get controller from &lt;code>$event-&amp;gt;getController()&lt;/code>. Check if it implements &lt;code>RequestHandlerInterface&lt;/code>.&lt;/li>
&lt;li>If yes: Convert &lt;code>$event-&amp;gt;getRequest()&lt;/code> -&amp;gt; PSR-7 Request.&lt;/li>
&lt;li>Call &lt;code>$controller-&amp;gt;handle($psr7Request)&lt;/code>.&lt;/li>
&lt;li>Convert PSR-7 Response -&amp;gt; Symfony Response.&lt;/li>
&lt;li>Call &lt;code>$event-&amp;gt;setResponse($symfonyResponse)&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Register the listener with appropriate priority.&lt;/li>
&lt;li>Route directly to the service ID or FQCN of your PSR-15 handler class.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Pros:&lt;/strong> &lt;strong>Eliminates adapter boilerplate.&lt;/strong> Centralizes bridging logic. Allows clean routing directly to PSR-15 handlers. Promotes PSR standard usage cleanly within Symfony.&lt;/li>
&lt;li>&lt;strong>Cons:&lt;/strong> Requires deeper understanding of Symfony&amp;rsquo;s Kernel Events. The listener becomes a critical piece of infrastructure that needs careful testing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Overall Symfony &amp;amp; PSR:&lt;/strong> Symfony offers excellent tools and flexibility (&lt;code>psr-http-message-bridge&lt;/code>, Kernel Events) to achieve clean PSR-15 integration via the listener approach. While not PSR-native at its core HTTP layer, its robust component system and extensibility make it a strong choice for developers wanting a full-stack framework that respects and facilitates PSR standard adherence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-laravel-achieving-psr-15-compliance">3. Laravel: Achieving PSR-15 Compliance
&lt;/h3>&lt;p>Laravel prioritizes developer experience and convention. While it uses HttpFoundation internally and doesn&amp;rsquo;t natively execute PSR-15 handlers, integration is possible.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Option 1: Adapter Pattern (The Basic Approach)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Concept:&lt;/strong> Similar to Symfony&amp;rsquo;s adapter - create an invokable Laravel controller (&lt;code>__invoke&lt;/code>) that uses the PSR-7 bridge (included via dependencies) to convert the &lt;code>Illuminate\Http\Request&lt;/code>, call the PSR-15 handler, and convert the PSR-7 response back to a Laravel-compatible response. Requires PSR-7 implementation like Nyholm and manual factory setup.&lt;/li>
&lt;li>&lt;strong>Pros:&lt;/strong> Explicit.&lt;/li>
&lt;li>&lt;strong>Cons:&lt;/strong> &lt;strong>Significant boilerplate&lt;/strong> per handler. Feels unnatural in the Laravel ecosystem.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="nx">App\Http\Controllers\Api\Order&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">App\Handler\ProcessOrderHandler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Illuminate\Http\Request&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Psr\Http\Message\ResponseInterface&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nx">PsrResponseInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Psr\Http\Message\ServerRequestInterface&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nx">PsrServerRequestInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span> &lt;span class="nx">Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Use appropriate factories - Laravel includes the bridge, but you might need to wire factories
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Usually requires Nyholm PSR-7 implementation `composer require nyholm/psr7`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// and `composer require symfony/psr-http-message-bridge`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ProcessOrderAdapterController&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">ProcessOrderHandler&lt;/span> &lt;span class="nv">$handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">PsrHttpFactory&lt;/span> &lt;span class="nv">$psrHttpFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="nx">HttpFoundationFactory&lt;/span> &lt;span class="nv">$httpFoundationFactory&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__construct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ProcessOrderHandler&lt;/span> &lt;span class="nv">$handler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$handler&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Manually create factories or inject them if configured in service container
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Requires PSR-7 implementation (like Nyholm) to be available
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">\Nyholm\Psr7\Factory\Psr17Factory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">psrHttpFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">PsrHttpFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">httpFoundationFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">HttpFoundationFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sd">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> * Handle the incoming request.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Request&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Receives Laravel Request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 1. Convert Laravel Request -&amp;gt; PSR-7 Request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psrRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">psrHttpFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 2. Call the actual PSR-15 Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psrResponse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handler&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psrRequest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 3. Convert PSR-7 Response -&amp;gt; Symfony/Laravel Response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">httpFoundationFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psrResponse&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 4. Return Laravel compatible Response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nv">$response&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Option 2: Centralized Middleware (The Cleaner Approach)&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Concept:&lt;/strong> Create a custom Laravel Middleware. This middleware checks if the controller class resolved by the router for the current route implements &lt;code>RequestHandlerInterface&lt;/code>. If it does, the middleware takes over: it instantiates the handler (via container), performs the Request/Response bridging using PSR-7 factories, executes the handler&amp;rsquo;s &lt;code>handle&lt;/code> method, and returns the converted response directly, bypassing Laravel&amp;rsquo;s standard controller dispatch (&lt;code>$next($request)&lt;/code> is skipped).&lt;/li>
&lt;li>&lt;strong>Detailed Steps:&lt;/strong>
&lt;ol>
&lt;li>Install PSR-7 implementation: &lt;code>composer require nyholm/psr7&lt;/code>. Ensure bridge is available (usually is).&lt;/li>
&lt;li>Create your PSR-15 handler class.&lt;/li>
&lt;li>Create a Middleware class (e.g., &lt;code>HandlePsr15Requests&lt;/code>).&lt;/li>
&lt;li>Inject or create PSR-7 bridge factories within the middleware.&lt;/li>
&lt;li>In the &lt;code>handle($request, Closure $next)&lt;/code> method:
&lt;ul>
&lt;li>Inspect &lt;code>$request-&amp;gt;route()-&amp;gt;getController()&lt;/code> or &lt;code>$request-&amp;gt;route()-&amp;gt;getActionName()&lt;/code> to find the target handler class.&lt;/li>
&lt;li>Use Reflection or the container to check if it implements &lt;code>RequestHandlerInterface&lt;/code>.&lt;/li>
&lt;li>If yes: Instantiate handler via &lt;code>app()-&amp;gt;make()&lt;/code>. Convert &lt;code>Illuminate\Http\Request&lt;/code> -&amp;gt; PSR-7 Request. Call &lt;code>handle()&lt;/code>. Convert PSR-7 Response -&amp;gt; Laravel Response. &lt;code>return $laravelResponse;&lt;/code>&lt;/li>
&lt;li>If no: &lt;code>return $next($request);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Register the middleware globally or in a specific route group (e.g., &lt;code>api&lt;/code>) in &lt;code>app/Http/Kernel.php&lt;/code>.&lt;/li>
&lt;li>Route directly to the FQCN of your PSR-15 handler class.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Pros:&lt;/strong> &lt;strong>Eliminates adapter boilerplate.&lt;/strong> Centralizes bridging logic. Allows routing directly to PSR-15 handlers.&lt;/li>
&lt;li>&lt;strong>Cons:&lt;/strong> Middleware becomes complex and critical. Requires careful handling of route information and potential pipeline order issues. Setting up PSR-7 factories might need a Service Provider. Works slightly &amp;ldquo;against the grain&amp;rdquo; of Laravel&amp;rsquo;s typical controller flow.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Request&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Closure&lt;/span> &lt;span class="nv">$next&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$route&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">route&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$controllerAction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$route&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getActionName&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Might be &amp;#39;ClassName&amp;#39; or &amp;#39;ClassName@method&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Need a reliable way to get the target class name.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// $controllerAction could be &amp;#39;App\Handler\MyPsr15Handler&amp;#39; if routed directly to class
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Or sometimes it might be complex, need robust parsing if method is involved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Let&amp;#39;s assume direct class routing:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$controllerClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">is_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$controllerAction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">class_exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$controllerAction&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nv">$controllerAction&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Check if the resolved class exists and implements the interface
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$controllerClass&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">\ReflectionClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$controllerClass&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">implementsInterface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">\Psr\Http\Server\RequestHandlerInterface&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Instantiate the handler via the container to resolve dependencies
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psr15Handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$controllerClass&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Get bridge factories (configure in a Service Provider or create manually)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Requires PSR-7 Implementation (e.g., composer require nyholm/psr7)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">\Nyholm\Psr7\Factory\Psr17Factory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$psrHttpFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">\Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$psr17Factory&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$httpFoundationFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">\Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Convert Laravel Request -&amp;gt; PSR-7 Request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psrRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$psrHttpFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Execute the PSR-15 Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$psrResponse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$psr15Handler&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psrRequest&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Convert PSR-7 Response -&amp;gt; Laravel Response
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nv">$response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$httpFoundationFactory&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$psrResponse&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Return the response *directly*, bypassing $next() and standard controller dispatch
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nv">$response&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// If not a PSR-15 handler route, proceed normally
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nv">$next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$request&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Overall Laravel &amp;amp; PSR:&lt;/strong> Laravel &lt;em>can&lt;/em> be made to work with PSR-15 handlers via middleware, significantly cleaning up the adapter approach. However, compared to Symfony&amp;rsquo;s kernel events or Mezzio&amp;rsquo;s native support, it feels less integrated. Laravel&amp;rsquo;s strength lies in its opinionated, rapid development workflow using its native components (Eloquent, Blade, Facades). Pushing for strict PSR-15 handler compliance requires bypassing some of that core flow.&lt;/li>
&lt;/ul>
&lt;h2 id="general-pros-and-cons-of-the-single-action-handler-pattern-summary">General Pros and Cons of the Single Action Handler Pattern (Summary)
&lt;/h2>&lt;p>&lt;strong>Pros:&lt;/strong> SRP, Testability, Organization, Readability, Precise Dependencies.
&lt;strong>Cons:&lt;/strong> Potentially more files, requires conscious architectural choice.&lt;/p>
&lt;h2 id="when-to-use-this-pattern">When to Use This Pattern
&lt;/h2>&lt;ul>
&lt;li>API endpoints.&lt;/li>
&lt;li>Single, distinct web actions (form processing, etc.).&lt;/li>
&lt;li>When controller actions become complex.&lt;/li>
&lt;li>To enforce SRP and improve testability.&lt;/li>
&lt;li>As the default in PSR-15 native frameworks.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion--framework-choice-considerations">Conclusion &amp;amp; Framework Choice Considerations
&lt;/h2>&lt;p>The Single Action Handler pattern, especially when implemented using the PSR-15 &lt;code>RequestHandlerInterface&lt;/code>, represents a powerful approach for building modern, maintainable, and testable PHP applications. Adhering to PSR standards like PSR-7 and PSR-15 brings significant benefits in interoperability, reusability, and future-proofing your codebase.&lt;/p>
&lt;p>When choosing a framework with PSR adherence in mind:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>For Native PSR-15/7 Experience:&lt;/strong> If maximizing interoperability and working directly with PSR standards at the core HTTP layer is your highest priority, a &lt;strong>middleware-centric framework like Mezzio&lt;/strong> is designed specifically for this. It offers the cleanest, most direct path to leveraging PSR-7/15.&lt;/li>
&lt;li>&lt;strong>For Full-Stack Power with PSR Flexibility:&lt;/strong> If you require a comprehensive framework with a vast ecosystem, but still want the ability to cleanly integrate and prioritize PSR-15 handlers, &lt;strong>Symfony&lt;/strong> provides excellent flexibility. Its robust DI container, component system, and kernel events (allowing the centralized listener approach) make it a strong contender for building large applications that adhere well to PSR standards with reasonable effort.&lt;/li>
&lt;li>&lt;strong>For Rapid Development &amp;amp; DX Prioritizing Framework Conventions:&lt;/strong> If top development speed, an integrated ecosystem, and convention over configuration are paramount, &lt;strong>Laravel&lt;/strong> excels. While achieving strict PSR-15 handler compliance requires more deliberate effort (via the centralized middleware approach, working slightly against the native flow), it&amp;rsquo;s possible. However, the main draw of Laravel often lies in embracing &lt;em>its&lt;/em> way of doing things.&lt;/li>
&lt;/ul></description></item><item><title>PHP + Static Analysis vs. Native Statically Typed Languages</title><link>https://ilyasdeckers.ody.dev/p/php-static-analysis-vs-native-statically-typed-languages/</link><pubDate>Sun, 13 Apr 2025 00:01:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/php-static-analysis-vs-native-statically-typed-languages/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>Modern software development increasingly emphasizes code robustness, maintainability, and catching errors early. Type safety plays a crucial role in achieving these goals. Teams often face a choice: migrate to a language with built-in static typing or enhance their existing dynamically typed language (like PHP) with powerful static analysis tools.&lt;/p>
&lt;p>This document compares these two approaches:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Native Statically Typed Languages:&lt;/strong> Languages where type checking is a fundamental, mandatory part of the compiler (e.g., Go, C#, Rust, Scala, Java, TypeScript*).&lt;/li>
&lt;li>&lt;strong>PHP + Static Analysis Tools:&lt;/strong> Using PHP (which is dynamically typed at its core) augmented with tools like PHPStan or Psalm to perform type checking before runtime.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>(*Note: TypeScript compiles to JavaScript but provides static typing during development and compilation).&lt;/em>&lt;/p>
&lt;h2 id="approach-1-native-statically-typed-languages">Approach 1: Native Statically Typed Languages
&lt;/h2>&lt;h3 id="definition">Definition
&lt;/h3>&lt;p>These languages require type information to be known at compile time. The compiler rigorously checks type compatibility throughout the codebase before producing an executable or intermediate code.&lt;/p>
&lt;p>&lt;em>(Examples: Go, C#, Rust, Scala, Java)&lt;/em>&lt;/p>
&lt;h3 id="mechanism">Mechanism
&lt;/h3>&lt;ul>
&lt;li>Type checking is &lt;strong>inherent to the language and compiler&lt;/strong>.&lt;/li>
&lt;li>It&amp;rsquo;s a &lt;strong>mandatory step&lt;/strong> to produce a runnable program.&lt;/li>
&lt;li>Errors found by the compiler &lt;strong>prevent compilation&lt;/strong> altogether.&lt;/li>
&lt;/ul>
&lt;h3 id="pros">Pros
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Strong Compile-Time Guarantees:&lt;/strong> Catches a wide range of type errors, null pointer issues (depending on language features like null safety), and API contract violations &lt;em>before&lt;/em> the code can even run.&lt;/li>
&lt;li>&lt;strong>High Runtime Safety:&lt;/strong> The compiled code benefits from the guarantees established at compile time, leading to fewer unexpected runtime type errors.&lt;/li>
&lt;li>&lt;strong>Excellent Refactoring Safety:&lt;/strong> The compiler immediately flags issues arising from code changes (e.g., changing a function signature).&lt;/li>
&lt;li>&lt;strong>Performance Potential:&lt;/strong> Type information allows compilers to perform significant optimizations (Ahead-of-Time compilation), often leading to better runtime performance compared to interpreted languages.&lt;/li>
&lt;li>&lt;strong>Clear Contracts:&lt;/strong> Types serve as enforced documentation, making interfaces and data structures explicit.&lt;/li>
&lt;li>&lt;strong>Rich Native Type Systems:&lt;/strong> Often include advanced features like generics, interfaces, traits, enums, etc., as core language constructs.&lt;/li>
&lt;li>&lt;strong>Mature Tooling &amp;amp; IDE Support:&lt;/strong> Excellent code completion, error highlighting, and refactoring tools based directly on the language&amp;rsquo;s type system.&lt;/li>
&lt;/ul>
&lt;h3 id="cons">Cons
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Steeper Learning Curve:&lt;/strong> Requires learning a new language syntax, standard library, ecosystem, build tools, and potentially different programming paradigms (e.g., Go&amp;rsquo;s concurrency, Rust&amp;rsquo;s ownership).&lt;/li>
&lt;li>&lt;strong>Migration Effort:&lt;/strong> Moving an existing PHP codebase requires a significant rewrite.&lt;/li>
&lt;li>&lt;strong>Initial Strictness:&lt;/strong> Can feel less flexible or more verbose initially compared to dynamic languages.&lt;/li>
&lt;li>&lt;strong>Compilation Time:&lt;/strong> Can be a factor in development cycles for very large projects (though often offset by finding errors earlier).&lt;/li>
&lt;/ul>
&lt;h2 id="approach-2-php--static-analysis-tools">Approach 2: PHP + Static Analysis Tools
&lt;/h2>&lt;h3 id="definition-1">Definition
&lt;/h3>&lt;p>This involves writing standard PHP code, leveraging its native type hinting features (scalar types, return types, property types, union types, etc.), and potentially adding detailed PHPDoc annotations. External tools then analyze this code &lt;em>without running it&lt;/em>.&lt;/p>
&lt;p>&lt;em>(Examples: PHP with PHPStan or Psalm)&lt;/em>&lt;/p>
&lt;h3 id="mechanism-1">Mechanism
&lt;/h3>&lt;ul>
&lt;li>Type checking is performed by an &lt;strong>external tool&lt;/strong>, separate from the PHP interpreter itself.&lt;/li>
&lt;li>It analyzes code based on native type hints (&lt;code>int&lt;/code>, &lt;code>string&lt;/code>, &lt;code>?User&lt;/code>, &lt;code>int|string&lt;/code>) and detailed PHPDoc annotations (&lt;code>@var&lt;/code>, &lt;code>@param&lt;/code>, &lt;code>@return&lt;/code>, &lt;code>@template&lt;/code>, &lt;code>array{...}&lt;/code>).&lt;/li>
&lt;li>Analysis is typically run manually, via commit hooks, or in a CI/CD pipeline. It &lt;strong>does not prevent&lt;/strong> PHP from &lt;em>attempting&lt;/em> to run code with type errors if the analysis step is skipped.&lt;/li>
&lt;/ul>
&lt;h3 id="pros-1">Pros
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Familiar Ecosystem:&lt;/strong> Allows teams to stay within the PHP language, leveraging existing knowledge, frameworks (Laravel, Symfony, etc.), libraries, and infrastructure.&lt;/li>
&lt;li>&lt;strong>Lower Initial Learning Curve:&lt;/strong> Focuses on learning the static analysis tool and writing better-typed PHP, rather than an entirely new language.&lt;/li>
&lt;li>&lt;strong>Gradual Adoption:&lt;/strong> Tools like PHPStan/Psalm have configurable levels and baseline features, allowing teams to introduce type checking incrementally, focusing on new code first if needed.&lt;/li>
&lt;li>&lt;strong>Catches Most Type Errors:&lt;/strong> When configured well and used diligently, these tools catch a vast majority of type-related errors, nullability issues, and other potential bugs before runtime.&lt;/li>
&lt;li>&lt;strong>Improved Code Quality:&lt;/strong> Significantly enhances PHP code&amp;rsquo;s readability, maintainability, and reliability.&lt;/li>
&lt;li>&lt;strong>Safer Refactoring within PHP:&lt;/strong> Provides much greater confidence when making changes to existing PHP code.&lt;/li>
&lt;li>&lt;strong>Excellent IDE Integration:&lt;/strong> Plugins provide real-time feedback directly in the editor (VS Code, PhpStorm).&lt;/li>
&lt;/ul>
&lt;h3 id="cons-1">Cons
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>No Runtime Guarantee:&lt;/strong> PHP&amp;rsquo;s core execution model remains dynamically typed. If the static analysis step is skipped, incomplete, or if external dependencies violate contracts in unexpected ways, &lt;strong>runtime type errors are still possible&lt;/strong>. The guarantee comes from the &lt;em>process&lt;/em> of using the tool, not the language runtime itself.&lt;/li>
&lt;li>&lt;strong>Dependency on Tooling &amp;amp; Annotations:&lt;/strong> The effectiveness relies heavily on the quality of type hints, the thoroughness of PHPDoc annotations (especially for generics or complex array shapes), and the configuration level of the analysis tool.&lt;/li>
&lt;li>&lt;strong>Potential Verbosity (PHPDoc):&lt;/strong> Complex type scenarios might require verbose PHPDoc blocks where native PHP types are insufficient. (PHP continues to improve its native type system, reducing this over time).&lt;/li>
&lt;li>&lt;strong>Analysis Time:&lt;/strong> Can add time to CI builds or pre-commit checks for large projects.&lt;/li>
&lt;li>&lt;strong>No Inherent Performance Gain:&lt;/strong> Does not fundamentally change PHP&amp;rsquo;s runtime performance characteristics (unlike compilation in many static languages).&lt;/li>
&lt;/ul>
&lt;h2 id="key-differences-summarized">Key Differences Summarized
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Feature&lt;/th>
&lt;th style="text-align: left">Native Static Language (Go, C#, Rust&amp;hellip;)&lt;/th>
&lt;th style="text-align: left">PHP + Static Analysis (PHPStan/Psalm)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Core Nature&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Statically Typed&lt;/td>
&lt;td style="text-align: left">Dynamically Typed (at runtime)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Enforcement By&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Compiler (Built-in, Mandatory)&lt;/td>
&lt;td style="text-align: left">External Tool (Process-driven)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Error Detection&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Compile-Time&lt;/td>
&lt;td style="text-align: left">Analysis-Time (Pre-Runtime)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Runtime Safety&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Very High (Language Guarantee)&lt;/td>
&lt;td style="text-align: left">High (If analysis is run &amp;amp; complete)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Type System Used&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Native Language Features&lt;/td>
&lt;td style="text-align: left">Native PHP Types + PHPDoc Annotations&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Performance&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Often Higher (AOT Optimizations)&lt;/td>
&lt;td style="text-align: left">Standard PHP Performance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Learning Curve&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Higher (New Language/Ecosystem)&lt;/td>
&lt;td style="text-align: left">Lower (Enhance Existing Skills)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Adoption Scope&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Full Language Switch&lt;/td>
&lt;td style="text-align: left">Incremental / Gradual Possible&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Flexibility&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Lower (Compiler Strictness)&lt;/td>
&lt;td style="text-align: left">Higher (PHP Core Dynamism)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="when-to-choose-which-approach">When to Choose Which Approach?
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Choose Native Static Languages if:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Performance, concurrency, or compile-time memory safety are top priorities.&lt;/li>
&lt;li>Starting a new project where the team is willing and able to learn a new ecosystem.&lt;/li>
&lt;li>The specific strengths of a language align well with the project domain (e.g., systems work for Rust, high-concurrency services for Go, large enterprise apps for C#/Java).&lt;/li>
&lt;li>You require the strongest possible &lt;em>runtime&lt;/em> guarantees enforced by the language itself.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Choose PHP + Static Analysis if:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>You need to improve the quality and maintainability of an existing PHP codebase.&lt;/li>
&lt;li>Your team wants to remain within the PHP ecosystem (frameworks, libraries, developer skills).&lt;/li>
&lt;li>A lower initial learning curve and gradual adoption are preferred.&lt;/li>
&lt;li>You value PHP&amp;rsquo;s flexibility and rapid development cycle but want significantly increased safety.&lt;/li>
&lt;li>You accept that the ultimate runtime safety relies on the &lt;em>process&lt;/em> of using the tools correctly, rather than being inherent in the PHP runtime itself.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>Both approaches offer significant advantages over traditional, untyped dynamic language development. Native statically typed languages provide the strongest compile-time and runtime guarantees at the cost of a higher learning curve and migration effort. Enhancing PHP with powerful static analysis tools like PHPStan or Psalm offers a pragmatic path to achieving vastly improved type safety, code quality, and maintainability while leveraging existing skills and ecosystems, making it an excellent choice for many PHP teams.&lt;/p></description></item><item><title>Swoole undocumented features pt.1</title><link>https://ilyasdeckers.ody.dev/p/swoole-undocumented-features-pt1/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/swoole-undocumented-features-pt1/</guid><description>&lt;p>Letâ€™s dive into &lt;strong>Swooleâ€™s most extreme, undocumented, and borderline-insane optimizations and tools&lt;/strong>â€”the kind of stuff used by &lt;strong>Alibaba, Tencent, and Bytedance at scale&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 id="profile-guided-optimization">Profile-Guided Optimization
&lt;/h2>&lt;p>&lt;code>SWOOLE_HAVE_PGO&lt;/code>&lt;/p>
&lt;h3 id="what-it-is">&lt;strong>What It Is&lt;/strong>
&lt;/h3>&lt;p>A &lt;strong>compile-time technique&lt;/strong> where Swoole is first &lt;strong>profiled under real workload&lt;/strong> (e.g., 100K RPS), then &lt;strong>recompiled with optimizations&lt;/strong> tailored to that exact usage pattern.&lt;/p>
&lt;h3 id="how-it-works">&lt;strong>How It Works&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Instrumentation Phase&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure --enable-swoole --enable-gcov
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Runs benchmarks while collecting &lt;strong>branch prediction stats, cache misses, hot functions&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Optimization Phase&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure --enable-swoole --with-pgo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>GCC/Clang &lt;strong>rewrites hot paths&lt;/strong> (e.g., inlining coroutine switches).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="performance-gains">&lt;strong>Performance Gains&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>~15-25% faster&lt;/strong> coroutine scheduling.&lt;/li>
&lt;li>&lt;strong>L1/L2 cache misses reduced&lt;/strong> by up to 40%.&lt;/li>
&lt;li>&lt;strong>Best for&lt;/strong>:
&lt;ul>
&lt;li>High-frequency trading bots.&lt;/li>
&lt;li>API gateways (e.g., JSON/Protobuf parsing).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-catch">&lt;strong>The Catch&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Requires real traffic&lt;/strong> to profile (no synthetic benchmarks).&lt;/li>
&lt;li>&lt;strong>Breaks if workload changes&lt;/strong> (must re-profile).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="debugging-coroutine-hell">Debugging Coroutine Hell
&lt;/h2>&lt;p>&lt;code>--enable-swoole-fiber-sanitizer&lt;/code>&lt;/p>
&lt;h3 id="what-it-is-1">&lt;strong>What It Is&lt;/strong>
&lt;/h3>&lt;p>A &lt;strong>runtime memory debugger&lt;/strong> for Swoole coroutines, detecting:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Use-after-free&lt;/strong> in coroutine stacks.&lt;/li>
&lt;li>&lt;strong>Memory leaks&lt;/strong> in &lt;code>go()&lt;/code> closures.&lt;/li>
&lt;li>&lt;strong>Race conditions&lt;/strong> in shared globals.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-use-it">&lt;strong>How to Use It&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Compile Swoole in debug mode&lt;/strong>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure --enable-swoole --enable-debug --enable-swoole-fiber-sanitizer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>&lt;strong>Run your app&lt;/strong>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">USE_ZEND_ALLOC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> php -d swoole.fiber_sanitizer&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> your_app.php
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Logs &lt;strong>stack traces&lt;/strong> of leaks/crashes.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="who-needs-this">&lt;strong>Who Needs This?&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Devs debugging &amp;ldquo;phantom&amp;rdquo; segfaults&lt;/strong> in coroutines.&lt;/li>
&lt;li>&lt;strong>Teams using &lt;code>global $db&lt;/code> in workers&lt;/strong> (you monsters).&lt;/li>
&lt;/ul>
&lt;h3 id="the-dark-side">&lt;strong>The Dark Side&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>~10x slower&lt;/strong> (only for debugging).&lt;/li>
&lt;li>&lt;strong>Canâ€™t run with Valgrind&lt;/strong> (they fight over memory hooks).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="bytedances-10m-keep-alive-patch">Bytedanceâ€™s 10M+ Keep-Alive Patch
&lt;/h2>&lt;h3 id="the-problem">&lt;strong>The Problem&lt;/strong>
&lt;/h3>&lt;p>Swooleâ€™s default &lt;code>epoll&lt;/code> event loop &lt;strong>struggles past ~1M connections&lt;/strong> due to:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>O(n) socket fd scanning&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Kernel &lt;code>accept()&lt;/code> throttling&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h3 id="their-solution">&lt;strong>Their Solution&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;code>SO_REUSEPORT&lt;/code> + Lock-Free Accept&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Multiple workers &lt;strong>compete for new connections&lt;/strong> (no thundering herd).&lt;/li>
&lt;li>Uses &lt;strong>eBPF to bypass &lt;code>accept()&lt;/code>&lt;/strong> (directly assign fds to workers).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Custom &lt;code>epoll&lt;/code> Patch&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Replaces &lt;code>EPOLL_CTL_ADD&lt;/code> with &lt;strong>&lt;code>EPOLL_CTL_MOD&lt;/code> batching&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Saves ~7Âµs per connection&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Zero-Copy TLS&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>OpenSSL &lt;strong>bypassed&lt;/strong> for static certs (TLS 1.3 only).&lt;/li>
&lt;li>&lt;strong>Saves 1 full RTT per handshake&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="performance">&lt;strong>Performance&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>10M concurrent connections&lt;/strong> on a &lt;strong>single 32-core AWS &lt;code>c6gn.metal&lt;/code>&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>3M TLS handshakes/sec&lt;/strong> (with their modified OpenSSL).&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-try-it">&lt;strong>How to Try It&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>Their fork is &lt;strong>closed-source&lt;/strong>, but you can approximate it with:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure --enable-swoole --with-openssl-dir&lt;span class="o">=&lt;/span>/path/to/custom-openssl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>And in &lt;code>php.ini&lt;/code>:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="na">swoole.reuse_port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">swoole.enable_unsafe_epoll&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">1 ; Not for production!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="final-thoughts">&lt;strong>Final Thoughts&lt;/strong>
&lt;/h3>&lt;p>These are &lt;strong>weapons-grade optimizations&lt;/strong>â€”most projects donâ€™t need them, but if youâ€™re pushing Swoole to its absolute limits, theyâ€™re the difference between &lt;strong>&amp;ldquo;fast&amp;rdquo; and &amp;ldquo;WTF-fast&amp;rdquo;&lt;/strong>.&lt;/p>
&lt;p>Want to go &lt;strong>even deeper&lt;/strong>?:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>--enable-swoole-io_uring&lt;/code>&lt;/strong> (Linux 5.6+ only, replaces &lt;code>epoll&lt;/code>).&lt;/li>
&lt;li>&lt;strong>Swooleâ€™s secret &lt;code>dtrace&lt;/code> probes&lt;/strong> (for kernel-level profiling).&lt;/li>
&lt;li>&lt;strong>How WeChat uses Swoole as a TCP-to-HTTP/3 translator&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>The rabbit hole &lt;strong>never ends&lt;/strong>. ðŸš€&lt;/p></description></item><item><title>Vue Quicktip - Fetch on Created, Then Watch</title><link>https://ilyasdeckers.ody.dev/p/vue-fetch-on-created-then-watch/</link><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/vue-fetch-on-created-then-watch/</guid><description>&lt;img src="https://ilyasdeckers.ody.dev/p/vue-fetch-on-created-then-watch/cover.jpg" alt="Featured image of post Vue Quicktip - Fetch on Created, Then Watch" />&lt;p>A common pattern you see in Vue is calling a function on created, then watch a property for changes and recall that function. Whilst this is not a bad pattern, I will show you a quick tip how you can improve this code.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">created&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fetchUsers&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">watch&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">searchText&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fetchUsers&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Did you know that a watcher accepts method names, it can be a string referencing the function. A watcher does not have to be a function. This can be found in the documentation but is easy to miss. We can rewrite the watcher from before like this.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">watch&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">searchText&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;fetchUsers&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Another neat feature in Vue watchers is &lt;code>immediate: true&lt;/code>. This calls the function specified on the watcher on the creation of the component. Before we can use this we need to adjust the watchers, we create an object for that watcher like this.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">watch&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">searchText&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handler&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;fetchUsers&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">immediate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see we specified our function, as a string reference, as a handler and used immediate true. This watcher does exactly the same as the first code example of this post with less code. Fetch on created, then watch.&lt;/p></description></item><item><title>Vue.js - Create a global event bus</title><link>https://ilyasdeckers.ody.dev/p/vue-create-a-global-event-bus/</link><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/vue-create-a-global-event-bus/</guid><description>&lt;p>The event bus / publish-subscribe pattern, despite the bad press it sometimes gets, is still an excellent way of getting unrelated sections of your application to talk to each other. But wait! Before you go waste your time on another library, why not use Vueâ€™s powerful built-in event bus?&lt;/p>
&lt;h2 id="creating-the-event-bus">Creating the event bus
&lt;/h2>&lt;p>The first thing youâ€™ll need to do is create the event bus and make the bus available to each Vue instance by defining them on the prototype.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Vue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;$bus&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$root&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bus&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In your Vue component where you want to receive on the $bus put the following code. This listens to incoming requests send over the event bus.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mounted&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$bus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;funcName&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To trigger the defined event you simply use the following on any of your Vue components.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$bus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;funcName&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="use-case">Use case
&lt;/h2>&lt;p>In the following example, I trigger the visibility of a button located next to my breadcrumbs. Depending on what page is shown I want to manipulate the button text and function it triggers.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Breadcrumbs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">template&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">button&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;button.visible&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="nx">click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;$bus.$emit(button.func, true)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;btn btn-info d-none d-lg-block m-l-15&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="kr">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;fa fa-plus-circle&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&amp;lt;&lt;/span>&lt;span class="err">/i&amp;gt; {{ button.text }}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Breadcrumbs&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pageTitle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$route&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">button&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">visible&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">func&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mounted&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$bus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;breadButton&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now you can trigger the button&amp;rsquo;s visibility and action from any of your Vue components.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mounted&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$bus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;breadButton&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">visible&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;New Package&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">func&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;showOrderPage&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In more complex cases, you should consider employing a dedicated &lt;a class="link" href="https://vuejs.org/v2/guide/state-management.html" target="_blank" rel="noopener"
>state-management pattern&lt;/a>.
&lt;a class="link" href="https://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communication" target="_blank" rel="noopener"
>Full documentation&lt;/a>&lt;/p></description></item><item><title>Improving KVM performance for Ryzen with the NPT patch</title><link>https://ilyasdeckers.ody.dev/p/improving-kvm-performance-for-ryzen-with-npt-patch/</link><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/improving-kvm-performance-for-ryzen-with-npt-patch/</guid><description>&lt;h2 id="introduction">INTRODUCTION
&lt;/h2>&lt;p>GPU passthrough on Ryzen platform has its issues. The most common one, and the one I struggled with the most was a 10 year old bug. The one we will address today. For those who already tried GPU passthrough on ryzen with KVM, you should have noticed a serious performance drop in your guest vs running your GPU on bare metal. This issue could be adressed by using &lt;code>npt=0&lt;/code>. This brought along some other issues like not being able to use host-passthrough, the guest only detecting one core, cpu performance loss,&amp;hellip; Far from ideal. Last week &lt;a class="link" href="https://patchwork.kernel.org/patch/10027525/" target="_blank" rel="noopener"
>Geoffrey and Paolo&lt;/a> managed to patch this bug. In this article we will be applying the patch and compiling it with the latest linux kernel. (4.14-rc8)&lt;/p>
&lt;h2 id="getting-started">GETTING STARTED
&lt;/h2>&lt;p>You can use almost any kernel with this patch. I have tested this with kernel 4.10, 4.13 and 4.14-rc8. In this guide, I will be using kernel 4.14-rc8. Kernel 4.14 will be released very shortly as of writing. Linus Torvalds noted that this past week of 4.14 development was fairly quiet and perhaps doesn&amp;rsquo;t need an &amp;ldquo;RC8&amp;rdquo; update, but he opted for it anyways. UPDATE: Kernel 4.14 has been released. &lt;a class="link" href="https://ilyasdeckers.be/2017/11/17/how-to-install-kernel-4-14-in-linux-ubuntu/" target="_blank" rel="noopener"
>Click here&lt;/a> to learn how to install and update your kernel.&lt;/p>
&lt;h3 id="getting-the-kernel">Getting the kernel
&lt;/h3>&lt;p>First, we will get the build files for the new kernel.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git clone git://git.launchpad.net/~ubuntu-kernel-test/ubuntu/+source/linux/+git/mainline-crack v4.14-rc8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="creating-and-applying-the-patch">Creating and applying the patch
&lt;/h2>&lt;p>The patch can be found here: &lt;a class="link" href="https://patchwork.kernel.org/patch/10027525/" target="_blank" rel="noopener"
>https://patchwork.kernel.org/patch/10027525/&lt;/a> or copy and paste the patch to a new file npt-ryzen.patch&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nano npt-ryzen.patch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">index af256b786a70..af09baa3d736 &lt;span class="m">100644&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- a/arch/x86/kvm/svm.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+++ b/arch/x86/kvm/svm.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@@ -3626,6 +3626,13 @@ static int svm&lt;span class="se">\_&lt;/span>set&lt;span class="se">\_&lt;/span>msr&lt;span class="o">(&lt;/span>struct kvm&lt;span class="se">\_&lt;/span>vcpu &lt;span class="se">\*&lt;/span>vcpu, struct msr&lt;span class="se">\_&lt;/span>data &lt;span class="se">\*&lt;/span>msr&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> u32 &lt;span class="nv">ecx&lt;/span> &lt;span class="o">=&lt;/span> msr-&amp;gt;index&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> u64 &lt;span class="nv">data&lt;/span> &lt;span class="o">=&lt;/span> msr-&amp;gt;data&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> switch &lt;span class="o">(&lt;/span>ecx&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ &lt;span class="k">case&lt;/span> MSR&lt;span class="se">\_&lt;/span>IA32&lt;span class="se">\_&lt;/span>CR&lt;span class="se">\_&lt;/span>PAT:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>!kvm&lt;span class="se">\_&lt;/span>mtrr&lt;span class="se">\_&lt;/span>valid&lt;span class="o">(&lt;/span>vcpu, MSR&lt;span class="se">\_&lt;/span>IA32&lt;span class="se">\_&lt;/span>CR&lt;span class="se">\_&lt;/span>PAT, data&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ &lt;span class="k">return&lt;/span> 1&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ vcpu-&amp;gt;arch.pat &lt;span class="o">=&lt;/span> data&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ svm-&amp;gt;vmcb-&amp;gt;save.g&lt;span class="se">\_&lt;/span>pat &lt;span class="o">=&lt;/span> data&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ mark&lt;span class="se">\_&lt;/span>dirty&lt;span class="o">(&lt;/span>svm-&amp;gt;vmcb, VMCB&lt;span class="se">\_&lt;/span>NPT&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+ break&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> MSR&lt;span class="se">\_&lt;/span>IA32&lt;span class="se">\_&lt;/span>TSC:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kvm&lt;span class="se">\_&lt;/span>write&lt;span class="se">\_&lt;/span>tsc&lt;span class="o">(&lt;/span>vcpu, msr&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now that we have the patch we can apply it to our kernel.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd v4.14rc8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp /boot/config-$(uname -r) .config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">patch -p1 &amp;lt; npt-ryzen.patch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="compiling-the-new-kernel">Compiling the new kernel
&lt;/h2>&lt;p>If all went well, it is time to compile our new patched kernel. Remember, after compiling and installing the new kernel you will have to reboot. Execute the following commands to start compiling the kernel.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">yes &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> make oldconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make clean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make -j &lt;span class="m">4&lt;/span> deb-pkg &lt;span class="nv">LOCALVERSION&lt;/span>&lt;span class="o">=&lt;/span>-with-npt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note: this process can take up some time.&lt;/p>
&lt;h2 id="installing-the-kernel">Installing the kernel
&lt;/h2>&lt;p>After the compiling is done you will be left with some .deb files. These are the installation files that we need in order to install the patched kernel.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo dpkg -i linux-headers-4.14.0-rc6-custom&lt;span class="se">\_&lt;/span>4.14.0-rc6-custom-1&lt;span class="se">\_&lt;/span>amd64.deb linux-image-4.14.0-rc6-custom&lt;span class="se">\_&lt;/span>4.14.0-rc6-custom-1&lt;span class="se">\_&lt;/span>amd64.deb linux-libc-dev&lt;span class="se">\_&lt;/span>4.14.0-rc6-custom-1&lt;span class="se">\_&lt;/span>amd64.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>At this point you are ready to reboot your machine and your system should be ready for GPU passthrough without any performance loss on your KVM guest.&lt;/p></description></item><item><title>Build a High Available MySQL Cluster with Percona XtraDB and Ubuntu 16.04</title><link>https://ilyasdeckers.ody.dev/p/building-high-available-mysql-cluster-with-percona-xtradb/</link><pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate><guid>https://ilyasdeckers.ody.dev/p/building-high-available-mysql-cluster-with-percona-xtradb/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>This tutorial will show how to install the &lt;em>Percona XtraDB Cluster&lt;/em> on three &lt;em>Ubuntu&lt;/em> 16.04 LTS servers, using the packages from the official Percona repositories. After this tutorial you should be able to install, configure and secure a high available MySQL cluster.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites
&lt;/h2>&lt;p>To follow this tutorial you need 3 machines running Ubuntu 16.04. All machines need to be reachable over SSH and they need to be in the same network.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">node #1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hostname: mysql01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IP: 10.100.0.200
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node #2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hostname: mysql02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IP:10.100.0.201
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node #3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hostname: mysql03
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IP:10.100.0.202
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="configuring-the-repositories">Configuring the repositories
&lt;/h3>&lt;p>To install Percona XtraDB you will have to add the appropriate repositories to your servers. Run the following commands on the three nodes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://repo.percona.com/apt/percona-release_0.1-4.&lt;span class="k">$(&lt;/span>lsb_release -sc&lt;span class="k">)&lt;/span>_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo dpkg -i percona-release_0.1-4.&lt;span class="k">$(&lt;/span>lsb_release -sc&lt;span class="k">)&lt;/span>_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install percona-xtradb-cluster-57
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="configure-apparmor--selinux">Configure Apparmor &amp;amp; SElinux
&lt;/h3>&lt;p>In order to successfully start Percona XtraDB, it is advised to disable SElinux. When SElinux is enabled the communication between nodes does not work and the nodes won&amp;rsquo;t be able to join the cluster successfully. By default SElinux is not enabled in Ubuntu, if you have installed it previously there are some options for disabling it. To test if SElinux is enabled on your system run the following command.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">selinuxenabled &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> enabled &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> disabled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If SElinux is enabled you can completely remove it from your system by uninstalling it&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get remove selinux* --purge -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Or you can disable it by editing the config file for SElinux.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SELINUX&lt;/span>&lt;span class="o">=&lt;/span>disabled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Percona doesnâ€™t provide any AppArmor profile for PXC, but it seems that on this server (Ubuntu TLS), a previous version of MySQL was installed and then removed but the AppArmor profile was still present. So if you use apparmor (or if you donâ€™t know) and you want to check is there is a profile for mysql, you can run the following command :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apparmor_status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If a mysql profile is available you can disable it like this.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If SElinux is enabled you can completely remove it from your system by uninstalling it&lt;/p>
&lt;blockquote>
&lt;p>Remember to check all your nodes, it prevents a lot of issues later on.&lt;/p>&lt;/blockquote>
&lt;h2 id="configure-your-firewall">Configure your firewall
&lt;/h2>&lt;p>Percona XtraDB uses some ports asside from the standard 3306. You need to open these ports on your firewall for the cluster to function well.&lt;/p>
&lt;p>&lt;strong>MySQL:&lt;/strong> 3306&lt;br>
&lt;strong>Cluster Communication:&lt;/strong> 4567&lt;br>
&lt;strong>SST:&lt;/strong> 4568&lt;/p>
&lt;p>The main cluster communication happens over port 4567. You can change this by specifying this option.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wsrep_provider_options=&amp;#34;gmcast.listen_addr=tcp://0.0.0.0:4010;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="configure-the-bootstrap-node">Configure the bootstrap node
&lt;/h2>&lt;p>Go to your first node and open /etc/mysql/my.cnf and copy the following configuration at the end of the file and change the IP&amp;rsquo;s on line 2 and 6 to your configuration.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_provider&lt;/span>&lt;span class="o">=&lt;/span>/usr/lib/libgalera_smm.so
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_cluster_address&lt;/span>&lt;span class="o">=&lt;/span>gcomm://10.100.0.200,10.100.0.201,10.100.0.203 &lt;span class="c1"># Change the IP&amp;#39;s to your IP&amp;#39;s (ip1,ip2,ip3) &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">binlog_format&lt;/span>&lt;span class="o">=&lt;/span>ROW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">default_storage_engine&lt;/span>&lt;span class="o">=&lt;/span>InnoDB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">innodb_autoinc_lock_mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">address &lt;span class="nv">wsrep_node_address&lt;/span>&lt;span class="o">=&lt;/span>10.100.0.200 &lt;span class="c1"># The IP of the node that you are configuring&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_sst_method&lt;/span>&lt;span class="o">=&lt;/span>xtrabackup-v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_cluster_name&lt;/span>&lt;span class="o">=&lt;/span>my_mysql_cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_sst_auth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;username:password&amp;#34;&lt;/span> &lt;span class="c1"># A username and password for SST that we will configure later&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The first node is ready to be started. Execute the following command to bootsrap the cluster.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">/etc/init.d/mysql bootstrap-pxc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we have to check if the first node has started successfully.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo mysql -u root -p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysql &amp;gt; SHOW STATUS LIKE &lt;span class="s1">&amp;#39;wsrep%&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+----------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> Variable_name &lt;span class="p">|&lt;/span> Value &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+----------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_local_state_uuid &lt;span class="p">|&lt;/span> b598af3e-ace3-11e2-0800-3e90eb9cd5d3 &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_local_state &lt;span class="p">|&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_local_state_comment &lt;span class="p">|&lt;/span> Synced &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_cluster_size &lt;span class="p">|&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_cluster_status &lt;span class="p">|&lt;/span> Primary &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_connected &lt;span class="p">|&lt;/span> ON &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_ready &lt;span class="p">|&lt;/span> ON &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+----------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">60&lt;/span> rows in &lt;span class="nb">set&lt;/span> &lt;span class="o">(&lt;/span>0.01 sec&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see the first node started successfully and it is ready to accept other nodes to join the cluster. Now we have to configure a user to make use of State Snapshot Transfer. Change the username and password to the values you chose for wsrep_sst_auth in /etc/mysql/my.conf.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mysql&amp;gt; CREATE USER &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>@&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span> IDENTIFIED BY &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysql&amp;gt; GRANT PROCESS, RELOAD, LOCK TABLES, REPLICATION CLIENT ON &lt;span class="se">\*&lt;/span>.&lt;span class="se">\*&lt;/span> TO &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>@&lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysql&amp;gt; FLUSH PRIVILEGES&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>State Snapshot Transfer (SST) is a full data copy from one node (donor) to the joining node (joiner). Itâ€™s used when a new node joins the cluster. In order to be synchronized with the cluster, the new node has to receive data from a node that is already part of the cluster.&lt;/p>&lt;/blockquote>
&lt;h2 id="configure-the-two-other-nodes">Configure the two other nodes
&lt;/h2>&lt;p>Edit /etc/mysql/my.cnf on the two other nodes. Remember to change the IP of the host on line 6.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_provider&lt;/span>&lt;span class="o">=&lt;/span>/usr/lib/libgalera_smm.so
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_cluster_address&lt;/span>&lt;span class="o">=&lt;/span>gcomm://10.100.0.200,10.100.0.201,10.100.0.203 &lt;span class="c1"># Change the IP&amp;#39;s to your IP&amp;#39;s (ip1,ip2,ip3) &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">binlog&lt;span class="se">\_&lt;/span>format&lt;span class="o">=&lt;/span>ROW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">default_storage_engine&lt;/span>&lt;span class="o">=&lt;/span>InnoDB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">innodb_autoinc_lock_mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">address wsrep&lt;span class="se">\_&lt;/span>node_address&lt;span class="o">=&lt;/span>10.100.0.200 &lt;span class="c1"># The IP of the node that you are configuring&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_sst_method&lt;/span>&lt;span class="o">=&lt;/span>xtrabackup-v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_cluster_name&lt;/span>&lt;span class="o">=&lt;/span>my_mysql_cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">wsrep_sst_auth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;username:password&amp;#34;&lt;/span> &lt;span class="c1"># The username and password for SST&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then start MySQL on the nodes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo service mysql start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If everything went right, you can check the cluster status to check if all nodes are connected and the cluster is in a good state.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo mysql -u root -p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mysql&amp;gt; SHOW STATUS LIKE &lt;span class="s1">&amp;#39;wsrep%&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+----------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> Variable_name &lt;span class="p">|&lt;/span> Value &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+----------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_local_state_uuid &lt;span class="p">|&lt;/span> g4fd322e-whe3-11e2-0255&lt;span class="se">\3&lt;/span>e90eb9cd5d3 &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_local_state &lt;span class="p">|&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_local_state_comment &lt;span class="p">|&lt;/span> Synced &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_cluster_size &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_cluster_status &lt;span class="p">|&lt;/span> Primary &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_connected &lt;span class="p">|&lt;/span> ON &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> wsrep_ready &lt;span class="p">|&lt;/span> ON &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+----------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">40&lt;/span> rows in &lt;span class="nb">set&lt;/span> &lt;span class="o">(&lt;/span>0.01 sec&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>Setting up a Percona XtraDB cluster is relatively easy. There are however some things that could go wrong. 90% of the time it has something to do with SElinux. A whole other beast is when your cluster dies, there are a lot of scenario&amp;rsquo;s that could break the cluster. I will get more in depth in a later article.&lt;/p>
&lt;blockquote>
&lt;p>TIP: In case of any errors look for the file /var/lib/mysql/mysqlxx.err this file has saved me in a lot of situations when troubleshooting MySQL.&lt;/p>&lt;/blockquote></description></item></channel></rss>